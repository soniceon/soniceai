import Link from 'next/link';
import { useState } from 'react';
import { aiTools, AiTool } from '../data/aiTools';
import { useTranslation } from 'next-i18next';
import { messages } from '@/locales';
import { useSearch } from '@/context/SearchContext';

// 自动补全 typeLabels，确保所有 type 都有友好标签
const allTypes = Array.from(new Set(aiTools.map(t => t.type)));
const defaultLabels = {
  zh: '其他', en: 'Other', ja: 'その他', ko: '기타', de: 'Andere', fr: 'Autre', es: 'Otro', ru: 'Другое'
};
const typeLabels: Record<string, Record<string, string>> = {
  chatbot: {
    zh: '聊天机器人', en: 'Chatbot', ja: 'チャットボット', ko: '챗봇', de: 'Chatbot', fr: 'Chatbot', es: 'Chatbot', ru: 'Чат-бот',
  },
  image: {
    zh: '图像生成', en: 'Image Generation', ja: '画像生成', ko: '이미지 생성', de: 'Bildgenerierung', fr: 'Génération d\'image', es: 'Generación de imágenes', ru: 'Генерация изображений',
  },
  coding: {
    zh: '代码助手', en: 'Coding', ja: 'コーディング', ko: '코딩', de: 'Programmierung', fr: 'Codage', es: 'Codificación', ru: 'Кодинг',
  },
  productivity: {
    zh: '效率工具', en: 'Productivity', ja: '生産性', ko: '생산성', de: 'Produktivität', fr: 'Productivité', es: 'Productividad', ru: 'Продуктивность',
  },
  design: {
    zh: '设计', en: 'Design', ja: 'デザイン', ko: '디자인', de: 'Design', fr: 'Design', es: 'Diseño', ru: 'Дизайн',
  },
  writing: {
    zh: '写作', en: 'Writing', ja: '執筆', ko: '글쓰기', de: 'Schreiben', fr: 'Écriture', es: 'Escritura', ru: 'Письмо',
  },
  media: {
    zh: '音视频', en: 'Media', ja: 'メディア', ko: '미디어', de: 'Medien', fr: 'Médias', es: 'Medios', ru: 'Медиа',
  },
  marketing: {
    zh: '营销', en: 'Marketing', ja: 'マーケティング', ko: '마케팅', de: 'Marketing', fr: 'Marketing', es: 'Marketing', ru: 'Маркетинг',
  },
};
allTypes.forEach(type => {
  if (!typeLabels[type]) {
    typeLabels[type] = {
      zh: type,
      en: type.charAt(0).toUpperCase() + type.slice(1),
      ja: type,
      ko: type,
      de: type,
      fr: type,
      es: type,
      ru: type,
    };
  }
});

const featured = [
  {
    name: 'iFable',
    desc: 'Your personal anime universe, generated by AI.',
    icon: 'https://ifable.com/favicon.ico',
  },
  {
    name: 'Soul Machines',
    desc: 'Global leader in humanizing AI...',
    icon: 'https://www.soulmachines.com/favicon.ico',
  },
  {
    name: 'SalesAPE AI',
    desc: 'Your AI sales representative - ...',
    icon: 'https://salesape.com/favicon.ico',
  },
];

export default function ToolGrid() {
  const { t, i18n } = useTranslation('common');
  const { keyword, setKeyword } = useSearch();
  const [type, setType] = useState('all');
  const types = Array.from(new Set(aiTools.map(t => t.type)));
  const lang = i18n.language;

  const filtered = aiTools.filter(tool => {
    const matchType = type === 'all' || tool.type === type;
    const matchSearch =
      tool.name.zh.includes(keyword) ||
      tool.name.en.toLowerCase().includes(keyword.toLowerCase()) ||
      tool.desc.zh.includes(keyword) ||
      tool.desc.en.toLowerCase().includes(keyword.toLowerCase());
    return matchType && matchSearch;
  });

  // 新增：自动获取精选工具
  const featuredTools = aiTools.filter(t => t.featured);

  return (
    <div key={i18n.language} className="w-full flex flex-col md:flex-row gap-6">
      {/* 主内容区 */}
      <div className="flex-1 min-w-0 space-y-16 max-w-6xl mx-auto">
        {/* 搜索和分类标签区 */}
        <div className="flex flex-col gap-4 mb-8">
          <div className="flex flex-wrap gap-2">
            <button
              className={`px-4 py-1 rounded-full font-medium border transition
                ${type === 'all'
                  ? 'bg-purple-600 text-white border-purple-600'
                  : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'
                }`}
              onClick={() => setType('all')}
            >
              {t('all_categories')}
            </button>
            {types.map(t => (
              <button
                key={t}
                className={`px-4 py-1 rounded-full font-medium border transition
                  ${type === t
                    ? 'bg-purple-600 text-white border-purple-600'
                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'
                  }`}
                onClick={() => setType(t)}
              >
                {typeLabels[t]?.[lang] || typeLabels[t]?.en || t}
              </button>
            ))}
          </div>
        </div>

        {/* 工具网格 */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {filtered.map(tool => (
            <Link
              key={tool.id}
              href={`/tools/${tool.id}`}
              className="group block bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-[1.02] border border-gray-200 dark:border-gray-700 overflow-hidden hover:border-purple-300 dark:hover:border-purple-600"
            >
              <div className="p-6">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <h3 className="text-lg font-bold text-gray-900 dark:text-white group-hover:text-purple-600 transition-colors mb-2 line-clamp-1">
                      {tool.name[lang] || tool.name.en}
                    </h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-3 leading-relaxed">
                      {tool.desc[lang] || tool.desc.en}
                    </p>
                  </div>
                  <div className="flex-shrink-0 ml-3">
                    <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-purple-100 to-blue-100 dark:from-purple-900/30 dark:to-blue-900/30 flex items-center justify-center text-2xl">
                      {tool.icon}
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center justify-between text-sm mb-3">
                  <span className="px-3 py-1 bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300 rounded-full text-xs font-medium">
                    {typeLabels[tool.type]?.[lang] || typeLabels[tool.type]?.en || tool.type}
                  </span>
                  <div className="flex items-center gap-3 text-gray-500 dark:text-gray-400">
                    <span className="flex items-center gap-1">
                      <span className="text-yellow-500">⭐</span>
                      <span className="font-semibold">{tool.rating}</span>
                    </span>
                    <span className="flex items-center gap-1">
                      <span className="text-blue-500">👥</span>
                      <span className="font-semibold">{tool.users}</span>
                    </span>
                  </div>
                </div>

                {/* 标签 */}
                {tool.tags && tool.tags.length > 0 && (
                  <div className="flex flex-wrap gap-1">
                    {tool.tags.slice(0, 3).map((tag, index) => (
                      <span
                        key={index}
                        className="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-md text-xs"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            </Link>
          ))}
        </div>

        {/* 无结果提示 */}
        {filtered.length === 0 && (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">🔍</div>
            <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-2">
              {t('no_results_found')}
            </h3>
            <p className="text-gray-600 dark:text-gray-400">
              {t('try_different_keywords')}
            </p>
          </div>
        )}
      </div>
    </div>
  );
} 
